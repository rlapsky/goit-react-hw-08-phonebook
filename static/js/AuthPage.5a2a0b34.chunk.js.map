{"version":3,"sources":["Components/Auth/Validation/Validation.js","Components/Auth/TextInput/TextInput.js","Components/Auth/Auth.js","redux/auth/authOperations.js","pages/AuthPage.js"],"names":["validationSchema","Yup","shape","email","required","password","min","max","TextInput","label","props","useField","field","meta","touched","error","Auth","this","location","pathname","initialValues","displayName","onSubmit","values","registerOperations","loginOperations","isSubmitting","name","type","placeholder","component","disabled","Component","connect","user","dispatch","a","registerRequest","axios","post","returnSecureToken","data","registerSuccess","registerError","response","message","loginRequest","loginSuccess","loginError","withRouter","AuthPage"],"mappings":"4RACaA,EAAmBC,MAAaC,MAAM,CACjDC,MAAOF,MACJE,MAAM,yBACNC,SAAS,sBACZC,SAAUJ,MACPG,SAAS,qBACTE,IAAI,EAAG,iBACPC,IAAI,GAAI,oB,wBCYEC,EAlBG,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,yBACzC,EAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACA,OACE,qCACE,kCACGJ,EACD,iDACMG,GACAF,OAGPG,EAAKC,SAAWD,EAAKE,MACpB,4BAAIF,EAAKE,QACP,SCJJC,E,4JACF,WAAU,IAAD,OACL,OACI,8BACI,8BACI,gCACI,6BACsC,kBAAjCC,KAAKP,MAAMQ,SAASC,SACf,eACA,UAEV,cAAC,IAAD,CACIC,cAAe,CACXC,YAAa,GACblB,MAAO,GACPE,SAAU,IAEdL,iBAAkBA,EAClBsB,SAAU,SAACC,GAC0B,kBAAjC,EAAKb,MAAMQ,SAASC,SACd,EAAKT,MAAMc,mBAAmBD,GAC9B,EAAKb,MAAMe,gBAAgBF,IAVzC,SAaK,gBAAEG,EAAF,EAAEA,aAAF,OACG,eAAC,IAAD,WACsC,kBAAjC,EAAKhB,MAAMQ,SAASC,SACjB,qCACI,cAAC,EAAD,CACIQ,KAAK,cACLC,KAAK,cACLC,YAAY,OACZC,UAAU,MAEd,cAAC,EAAD,CACIH,KAAK,QACLC,KAAK,QACLC,YAAY,QACZC,UAAU,MAGd,cAAC,EAAD,CACIH,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,UAAU,SAIlB,qCACI,cAAC,EAAD,CACIH,KAAK,QACLC,KAAK,QACLC,YAAY,QACZC,UAAU,MAGd,cAAC,EAAD,CACIH,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,UAAU,SAKtB,wBACIF,KAAK,SACLG,SAAUL,EAFd,SAIsC,kBAAjC,EAAKhB,MAAMQ,SAASC,SACf,WACA,2B,GAxE3Ba,aAoFJC,cAAQ,KAAM,CAACT,mBCtFI,SAACU,GAAD,8CAAU,WAAOC,GAAP,iBAAAC,EAAA,6DAC1CD,EAASE,eADiC,kBAGjBC,IAAMC,KAAN,qIAGhBL,GAHgB,IAGVM,mBAAmB,KANQ,gBAGhCC,EAHgC,EAGhCA,KAKRN,EAASO,YAAgBD,IARe,gDAUxCN,EAASQ,YAAc,KAAMC,SAASH,KAAK1B,MAAM8B,UAVT,qGAAV,uDDsFgBpB,gBCxEnB,SAACS,GAAD,8CAAU,WAAOC,GAAP,iBAAAC,EAAA,6DACvCD,EAASW,eAD8B,kBAGdR,IAAMC,KAAN,iJAGhBL,GAHgB,IAGVM,mBAAmB,KANK,gBAG7BC,EAH6B,EAG7BA,KAKRN,EAASY,YAAaN,IARe,gDAUrCN,EAASa,YAAW,KAAMJ,SAASH,KAAK1B,MAAM8B,UAVT,qGAAV,wDDwEhBZ,CACXgB,YAAWjC,IErFAkC,UARE,WACf,OACE,mCACE,cAAC,EAAD","file":"static/js/AuthPage.5a2a0b34.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\nexport const validationSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email(\"Email must be @email!\")\r\n    .required(\"Field is Required!\"),\r\n  password: Yup.string()\r\n    .required(\"Field is Required\")\r\n    .min(6, \"min-6 simbols\")\r\n    .max(12, \"max-12 simbols\"),\r\n});\r\n","import React from \"react\";\r\nimport { useField } from \"formik\";\r\nconst TextInput = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label>\r\n        {label}\r\n        <input\r\n          {...field}\r\n          {...props}\r\n        />\r\n      </label>\r\n      {meta.touched && meta.error ? (\r\n        <p>{meta.error}</p>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router\";\r\nimport {\r\n    loginOperations,\r\n    registerOperations,\r\n} from \"../../redux/auth/authOperations\";\r\nimport {Formik, Form} from \"formik\";\r\nimport {validationSchema} from \"./Validation/Validation\";\r\nimport TextInput from \"./TextInput/TextInput\";\r\n\r\nclass Auth extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div>\r\n                        <h1>\r\n                            {this.props.location.pathname === \"/registration\"\r\n                                ? \"Registration\"\r\n                                : \"Login\"}\r\n                        </h1>\r\n                        <Formik\r\n                            initialValues={{\r\n                                displayName: \"\",\r\n                                email: \"\",\r\n                                password: \"\",\r\n                            }}\r\n                            validationSchema={validationSchema}\r\n                            onSubmit={(values) => {\r\n                                this.props.location.pathname === \"/registration\"\r\n                                    ? this.props.registerOperations(values)\r\n                                    : this.props.loginOperations(values);\r\n                            }}\r\n                        >\r\n                            {({isSubmitting}) => (\r\n                                <Form>\r\n                                    {this.props.location.pathname === \"/registration\" ? (\r\n                                        <>\r\n                                            <TextInput\r\n                                                name=\"displayName\"\r\n                                                type=\"displayName\"\r\n                                                placeholder=\"Name\"\r\n                                                component=\"p\"\r\n                                            />\r\n                                            <TextInput\r\n                                                name=\"email\"\r\n                                                type=\"email\"\r\n                                                placeholder=\"Email\"\r\n                                                component=\"p\"\r\n                                            />\r\n\r\n                                            <TextInput\r\n                                                name=\"password\"\r\n                                                type=\"password\"\r\n                                                placeholder=\"Password\"\r\n                                                component=\"p\"\r\n                                            />\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <TextInput\r\n                                                name=\"email\"\r\n                                                type=\"email\"\r\n                                                placeholder=\"Email\"\r\n                                                component=\"p\"\r\n                                            />\r\n\r\n                                            <TextInput\r\n                                                name=\"password\"\r\n                                                type=\"password\"\r\n                                                placeholder=\"Password\"\r\n                                                component=\"p\"\r\n                                            />\r\n                                        </>\r\n                                    )}\r\n\r\n                                    <button\r\n                                        type=\"submit\"\r\n                                        disabled={isSubmitting}\r\n                                    >\r\n                                        {this.props.location.pathname === \"/registration\"\r\n                                            ? \"register\"\r\n                                            : \"login\"}\r\n                                    </button>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, {registerOperations, loginOperations})(\r\n    withRouter(Auth)\r\n);\r\n","import axios from \"axios\";\r\nimport {\r\n  loginError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  registerError,\r\n  registerRequest,\r\n  registerSuccess,\r\n} from \"./authActions\";\r\nexport const registerOperations = (user) => async (dispatch) => {\r\n  dispatch(registerRequest());\r\n  try {\r\n    const { data } = await axios.post(\r\n      `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCBwlGwER9EOlAbFTlrMivjHQw8fVoZC9w\r\n`,\r\n      { ...user, returnSecureToken: true }\r\n    );\r\n    dispatch(registerSuccess(data));\r\n  } catch (error) {\r\n    dispatch(registerError(error.response.data.error.message));\r\n  } finally {\r\n  }\r\n};\r\nexport const loginOperations = (user) => async (dispatch) => {\r\n  dispatch(loginRequest());\r\n  try {\r\n    const { data } = await axios.post(\r\n      `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCBwlGwER9EOlAbFTlrMivjHQw8fVoZC9w\r\n`,\r\n      { ...user, returnSecureToken: true }\r\n    );\r\n    dispatch(loginSuccess(data));\r\n  } catch (error) {\r\n    dispatch(loginError(error.response.data.error.message));\r\n  } finally {\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport Auth from \"../Components/Auth/Auth\";\r\n\r\nconst AuthPage = () => {\r\n  return (\r\n    <>\r\n      <Auth/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthPage;\r\n"],"sourceRoot":""}